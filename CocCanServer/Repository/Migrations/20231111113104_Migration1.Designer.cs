// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Entities;

namespace Repository.Migrations
{
    [DbContext(typeof(CocCanDBContext))]
    [Migration("20231111113104_Migration1")]
    partial class Migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Repository.Entities.Batch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StoreId");

                    b.ToTable("Batch");
                });

            modelBuilder.Entity("Repository.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Repository.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "UQ__Customer__A9D10534481ABC94")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Repository.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Repository.Entities.LocationStore", b =>
                {
                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("LocationId");

                    b.HasIndex("StoreId");

                    b.ToTable("LocationStore");
                });

            modelBuilder.Entity("Repository.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Repository.Entities.MenuDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("ProductId");

                    b.ToTable("MenuDetail");
                });

            modelBuilder.Entity("Repository.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("CartTotalAmount")
                        .HasColumnType("money");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("money");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<Guid>("PickUpSpotId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("money");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PickUpSpotId");

                    b.HasIndex("SessionId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Repository.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("MenuDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("SinglePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuDetailId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Repository.Entities.PickUpSpot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PickUpSpot");
                });

            modelBuilder.Entity("Repository.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Repository.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SessionStatus")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TimeSlotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MenuId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("Repository.Entities.Staff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Username" }, "UQ__Staff__536C85E48538B6A1")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Staff__A9D10534A955581F")
                        .IsUnique();

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Repository.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Repository.Entities.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TimeSlot");
                });

            modelBuilder.Entity("Repository.Entities.Batch", b =>
                {
                    b.HasOne("Repository.Entities.Session", "Session")
                        .WithMany("Batches")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_BATCH_SESSIONID")
                        .IsRequired();

                    b.HasOne("Repository.Entities.Staff", "Staff")
                        .WithMany("Batches")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_BATCH_STAFFID")
                        .IsRequired();

                    b.HasOne("Repository.Entities.Store", "Store")
                        .WithMany("Batches")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_BATCH_STOREID")
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Staff");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Repository.Entities.LocationStore", b =>
                {
                    b.HasOne("Repository.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_LOCATIONSTORE_LOCATIONID")
                        .IsRequired();

                    b.HasOne("Repository.Entities.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_LOCATIONSTORE_STOREID")
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Repository.Entities.MenuDetail", b =>
                {
                    b.HasOne("Repository.Entities.Menu", "Menu")
                        .WithMany("MenuDetails")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_MENUDETAIL_MENUID")
                        .IsRequired();

                    b.HasOne("Repository.Entities.Product", "Product")
                        .WithMany("MenuDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_MENUDETAIL_PRODUCTID")
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repository.Entities.Order", b =>
                {
                    b.HasOne("Repository.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_ORDER_CUSTOMERID")
                        .IsRequired();

                    b.HasOne("Repository.Entities.PickUpSpot", "PickUpSpot")
                        .WithMany("Orders")
                        .HasForeignKey("PickUpSpotId")
                        .HasConstraintName("FK_ORDER_PICKUPSPOTID")
                        .IsRequired();

                    b.HasOne("Repository.Entities.Session", "Session")
                        .WithMany("Orders")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_ORDER_SESSIONID")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PickUpSpot");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Repository.Entities.OrderDetail", b =>
                {
                    b.HasOne("Repository.Entities.MenuDetail", "MenuDetail")
                        .WithMany("OrderDetails")
                        .HasForeignKey("MenuDetailId")
                        .HasConstraintName("FK_ORDERDETAIL_MENUDETAILID")
                        .IsRequired();

                    b.HasOne("Repository.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_ORDERDETAIL_ORDERID")
                        .IsRequired();

                    b.Navigation("MenuDetail");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Repository.Entities.PickUpSpot", b =>
                {
                    b.HasOne("Repository.Entities.Location", "Location")
                        .WithMany("PickUpSpots")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_PICKUPSPOT_LOCATIONID")
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Repository.Entities.Product", b =>
                {
                    b.HasOne("Repository.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_PRODUCT_CATEGORYID");

                    b.HasOne("Repository.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_PRODUCT_STOREID");

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Repository.Entities.Session", b =>
                {
                    b.HasOne("Repository.Entities.Location", "Location")
                        .WithMany("Sessions")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_SESSION_LOCATIONID")
                        .IsRequired();

                    b.HasOne("Repository.Entities.Menu", "Menu")
                        .WithMany("Sessions")
                        .HasForeignKey("MenuId")
                        .HasConstraintName("FK_SESSION_MENUID")
                        .IsRequired();

                    b.HasOne("Repository.Entities.TimeSlot", "TimeSlot")
                        .WithMany("Sessions")
                        .HasForeignKey("TimeSlotId")
                        .HasConstraintName("FK_SESSION_TIMESLOTID")
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Menu");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("Repository.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Repository.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Repository.Entities.Location", b =>
                {
                    b.Navigation("PickUpSpots");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Repository.Entities.Menu", b =>
                {
                    b.Navigation("MenuDetails");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Repository.Entities.MenuDetail", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repository.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repository.Entities.PickUpSpot", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Repository.Entities.Product", b =>
                {
                    b.Navigation("MenuDetails");
                });

            modelBuilder.Entity("Repository.Entities.Session", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Repository.Entities.Staff", b =>
                {
                    b.Navigation("Batches");
                });

            modelBuilder.Entity("Repository.Entities.Store", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Repository.Entities.TimeSlot", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
